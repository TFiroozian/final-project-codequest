AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  CodeQuest SAM Template

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

    VpcConfig:
      # Copied this value from AWS conseol - these the sg ids of the default vpc 
      SecurityGroupIds:
        - sg-0ca13e71d995466fd
      SubnetIds:
        # TODO: the default AWS VPC only had public subnets so I deployed the Lambda in the public subnet 
        # As an improvement for the final submission make the subnets private and add a natgateway to VPC
        - subnet-0d103b1e487c6ef4a
        - subnet-06bf4990ff285a0ab
        - subnet-098b1c52033c9302c

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel.
    # Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

Resources:
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonLayer
      CompatibleRuntimes:
        - python3.12
      ContentUri: common_layer/
    Metadata:
      BuildMethod: makefile

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/query
      Handler: app.lambda_handler
      Runtime: python3.12
      # TODO: can we reduce timeout? 
      Timeout: 20
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ES_HOST: !Join [ "", [ "https://", !ImportValue OpensearchEndpointURL, ":443"  ] ] 
          # ES_INDEX_NAME: codequest-embedding
          ES_INDEX_NAME: "code-snippets-embeddings"
          BEDROCK_MODEL_ID: amazon.titan-embed-text-v2:0
      Architectures:
      - x86_64
      Events:
        QueryApi:
          Type: Api
          Properties:
            Path: /code/search
            Method: get

  # This job will be called manually / ad-hoc
  IngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/ingestion/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 300
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ES_HOST: !Join [ "", [ "https://", !ImportValue OpensearchEndpointURL, ":443"  ] ] 
          # ES_INDEX_NAME: codequest-embedding
          ES_INDEX_NAME: "code-snippets-embeddings"
          BEDROCK_MODEL_ID: amazon.titan-embed-text-v2:0
          SERVICE_ACCOUNT_KEY: '{{resolve:secretsmanager:GCloudServiceAccountKeyABF9-VqAXFmhkQpYI}}'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  QueryApi:
    Description: API Gateway endpoint URL for Prod stage for Query function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/code/search"
  QueryFunction:
    Description: Query Lambda Function ARN
    Value: !GetAtt QueryFunction.Arn
  IngestionFunction:
    Description: Ingestion Lambda Function ARN
    Value: !GetAtt IngestionFunction.Arn
  QueryFunctionIamRole:
    Description: Implicit IAM Role created for Query function
    Value: !GetAtt QueryFunctionRole.Arn
    Export:
      Name: "QueryFunctionIamRole"
  IngestionFunctionIamRole:
    Description: Implicit IAM Role created for Query function
    Value: !GetAtt IngestionFunctionRole.Arn
    Export:
      Name: "IngestionFunctionIamRole"
